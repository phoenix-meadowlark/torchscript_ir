graph(%self : __torch__.torchvision.models.vgg.___torch_mangle_1126.VGG,
      %x.1 : Tensor):
  %2 : int = prim::Constant[value=-1]()
  %3 : int = prim::Constant[value=1]() # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:29
  %4 : __torch__.torch.nn.modules.container.___torch_mangle_1125.Sequential = prim::GetAttr[name="features"](%self)
  %11 : bool = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:57
  %12 : int = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:28
  %13 : int = prim::Constant[value=2]() # torch/nn/modules/pooling.py:157:35
  %14 : int = prim::Constant[value=1]() # torch/nn/modules/conv.py:413:47
  %15 : __torch__.torch.nn.modules.conv.___torch_mangle_1107.Conv2d = prim::GetAttr[name="0"](%4)
  %16 : __torch__.torch.nn.modules.conv.___torch_mangle_10.Conv2d = prim::GetAttr[name="2"](%4)
  %17 : __torch__.torch.nn.modules.conv.___torch_mangle_1109.Conv2d = prim::GetAttr[name="5"](%4)
  %18 : __torch__.torch.nn.modules.conv.___torch_mangle_26.Conv2d = prim::GetAttr[name="7"](%4)
  %19 : __torch__.torch.nn.modules.conv.___torch_mangle_467.Conv2d = prim::GetAttr[name="10"](%4)
  %20 : __torch__.torch.nn.modules.conv.___torch_mangle_3.Conv2d = prim::GetAttr[name="12"](%4)
  %21 : __torch__.torch.nn.modules.conv.___torch_mangle_3.Conv2d = prim::GetAttr[name="14"](%4)
  %22 : __torch__.torch.nn.modules.conv.___torch_mangle_3.Conv2d = prim::GetAttr[name="16"](%4)
  %23 : __torch__.torch.nn.modules.conv.___torch_mangle_1110.Conv2d = prim::GetAttr[name="19"](%4)
  %24 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="21"](%4)
  %25 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="23"](%4)
  %26 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="25"](%4)
  %27 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="28"](%4)
  %28 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="30"](%4)
  %29 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="32"](%4)
  %30 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="34"](%4)
  %31 : Tensor = prim::GetAttr[name="weight"](%15)
  %32 : Tensor? = prim::GetAttr[name="bias"](%15)
  %33 : int[] = prim::ListConstruct(%14, %14)
  %34 : int[] = prim::ListConstruct(%14, %14)
  %35 : int[] = prim::ListConstruct(%14, %14)
  %input.4 : Tensor = aten::conv2d(%x.1, %31, %32, %33, %34, %35, %14) # torch/nn/modules/conv.py:415:15
  %input.6 : Tensor = aten::relu_(%input.4) # torch/nn/functional.py:1117:17
  %38 : Tensor = prim::GetAttr[name="weight"](%16)
  %39 : Tensor? = prim::GetAttr[name="bias"](%16)
  %40 : int[] = prim::ListConstruct(%14, %14)
  %41 : int[] = prim::ListConstruct(%14, %14)
  %42 : int[] = prim::ListConstruct(%14, %14)
  %input.8 : Tensor = aten::conv2d(%input.6, %38, %39, %40, %41, %42, %14) # torch/nn/modules/conv.py:415:15
  %input.10 : Tensor = aten::relu_(%input.8) # torch/nn/functional.py:1117:17
  %45 : int[] = prim::ListConstruct(%13, %13)
  %46 : int[] = prim::ListConstruct(%13, %13)
  %47 : int[] = prim::ListConstruct(%12, %12)
  %48 : int[] = prim::ListConstruct(%14, %14)
  %input.12 : Tensor = aten::max_pool2d(%input.10, %45, %46, %47, %48, %11) # torch/nn/functional.py:575:11
  %50 : Tensor = prim::GetAttr[name="weight"](%17)
  %51 : Tensor? = prim::GetAttr[name="bias"](%17)
  %52 : int[] = prim::ListConstruct(%14, %14)
  %53 : int[] = prim::ListConstruct(%14, %14)
  %54 : int[] = prim::ListConstruct(%14, %14)
  %input.14 : Tensor = aten::conv2d(%input.12, %50, %51, %52, %53, %54, %14) # torch/nn/modules/conv.py:415:15
  %input.16 : Tensor = aten::relu_(%input.14) # torch/nn/functional.py:1117:17
  %57 : Tensor = prim::GetAttr[name="weight"](%18)
  %58 : Tensor? = prim::GetAttr[name="bias"](%18)
  %59 : int[] = prim::ListConstruct(%14, %14)
  %60 : int[] = prim::ListConstruct(%14, %14)
  %61 : int[] = prim::ListConstruct(%14, %14)
  %input.17 : Tensor = aten::conv2d(%input.16, %57, %58, %59, %60, %61, %14) # torch/nn/modules/conv.py:415:15
  %input.19 : Tensor = aten::relu_(%input.17) # torch/nn/functional.py:1117:17
  %64 : int[] = prim::ListConstruct(%13, %13)
  %65 : int[] = prim::ListConstruct(%13, %13)
  %66 : int[] = prim::ListConstruct(%12, %12)
  %67 : int[] = prim::ListConstruct(%14, %14)
  %input.21 : Tensor = aten::max_pool2d(%input.19, %64, %65, %66, %67, %11) # torch/nn/functional.py:575:11
  %69 : Tensor = prim::GetAttr[name="weight"](%19)
  %70 : Tensor? = prim::GetAttr[name="bias"](%19)
  %71 : int[] = prim::ListConstruct(%14, %14)
  %72 : int[] = prim::ListConstruct(%14, %14)
  %73 : int[] = prim::ListConstruct(%14, %14)
  %input.23 : Tensor = aten::conv2d(%input.21, %69, %70, %71, %72, %73, %14) # torch/nn/modules/conv.py:415:15
  %input.25 : Tensor = aten::relu_(%input.23) # torch/nn/functional.py:1117:17
  %76 : Tensor = prim::GetAttr[name="weight"](%20)
  %77 : Tensor? = prim::GetAttr[name="bias"](%20)
  %78 : int[] = prim::ListConstruct(%14, %14)
  %79 : int[] = prim::ListConstruct(%14, %14)
  %80 : int[] = prim::ListConstruct(%14, %14)
  %input.27 : Tensor = aten::conv2d(%input.25, %76, %77, %78, %79, %80, %14) # torch/nn/modules/conv.py:415:15
  %input.29 : Tensor = aten::relu_(%input.27) # torch/nn/functional.py:1117:17
  %83 : Tensor = prim::GetAttr[name="weight"](%21)
  %84 : Tensor? = prim::GetAttr[name="bias"](%21)
  %85 : int[] = prim::ListConstruct(%14, %14)
  %86 : int[] = prim::ListConstruct(%14, %14)
  %87 : int[] = prim::ListConstruct(%14, %14)
  %input.31 : Tensor = aten::conv2d(%input.29, %83, %84, %85, %86, %87, %14) # torch/nn/modules/conv.py:415:15
  %input.33 : Tensor = aten::relu_(%input.31) # torch/nn/functional.py:1117:17
  %90 : Tensor = prim::GetAttr[name="weight"](%22)
  %91 : Tensor? = prim::GetAttr[name="bias"](%22)
  %92 : int[] = prim::ListConstruct(%14, %14)
  %93 : int[] = prim::ListConstruct(%14, %14)
  %94 : int[] = prim::ListConstruct(%14, %14)
  %input.35 : Tensor = aten::conv2d(%input.33, %90, %91, %92, %93, %94, %14) # torch/nn/modules/conv.py:415:15
  %input.37 : Tensor = aten::relu_(%input.35) # torch/nn/functional.py:1117:17
  %97 : int[] = prim::ListConstruct(%13, %13)
  %98 : int[] = prim::ListConstruct(%13, %13)
  %99 : int[] = prim::ListConstruct(%12, %12)
  %100 : int[] = prim::ListConstruct(%14, %14)
  %input.39 : Tensor = aten::max_pool2d(%input.37, %97, %98, %99, %100, %11) # torch/nn/functional.py:575:11
  %102 : Tensor = prim::GetAttr[name="weight"](%23)
  %103 : Tensor? = prim::GetAttr[name="bias"](%23)
  %104 : int[] = prim::ListConstruct(%14, %14)
  %105 : int[] = prim::ListConstruct(%14, %14)
  %106 : int[] = prim::ListConstruct(%14, %14)
  %input.41 : Tensor = aten::conv2d(%input.39, %102, %103, %104, %105, %106, %14) # torch/nn/modules/conv.py:415:15
  %input.43 : Tensor = aten::relu_(%input.41) # torch/nn/functional.py:1117:17
  %109 : Tensor = prim::GetAttr[name="weight"](%24)
  %110 : Tensor? = prim::GetAttr[name="bias"](%24)
  %111 : int[] = prim::ListConstruct(%14, %14)
  %112 : int[] = prim::ListConstruct(%14, %14)
  %113 : int[] = prim::ListConstruct(%14, %14)
  %input.45 : Tensor = aten::conv2d(%input.43, %109, %110, %111, %112, %113, %14) # torch/nn/modules/conv.py:415:15
  %input.47 : Tensor = aten::relu_(%input.45) # torch/nn/functional.py:1117:17
  %116 : Tensor = prim::GetAttr[name="weight"](%25)
  %117 : Tensor? = prim::GetAttr[name="bias"](%25)
  %118 : int[] = prim::ListConstruct(%14, %14)
  %119 : int[] = prim::ListConstruct(%14, %14)
  %120 : int[] = prim::ListConstruct(%14, %14)
  %input.49 : Tensor = aten::conv2d(%input.47, %116, %117, %118, %119, %120, %14) # torch/nn/modules/conv.py:415:15
  %input.51 : Tensor = aten::relu_(%input.49) # torch/nn/functional.py:1117:17
  %123 : Tensor = prim::GetAttr[name="weight"](%26)
  %124 : Tensor? = prim::GetAttr[name="bias"](%26)
  %125 : int[] = prim::ListConstruct(%14, %14)
  %126 : int[] = prim::ListConstruct(%14, %14)
  %127 : int[] = prim::ListConstruct(%14, %14)
  %input.53 : Tensor = aten::conv2d(%input.51, %123, %124, %125, %126, %127, %14) # torch/nn/modules/conv.py:415:15
  %input.55 : Tensor = aten::relu_(%input.53) # torch/nn/functional.py:1117:17
  %130 : int[] = prim::ListConstruct(%13, %13)
  %131 : int[] = prim::ListConstruct(%13, %13)
  %132 : int[] = prim::ListConstruct(%12, %12)
  %133 : int[] = prim::ListConstruct(%14, %14)
  %input.57 : Tensor = aten::max_pool2d(%input.55, %130, %131, %132, %133, %11) # torch/nn/functional.py:575:11
  %135 : Tensor = prim::GetAttr[name="weight"](%27)
  %136 : Tensor? = prim::GetAttr[name="bias"](%27)
  %137 : int[] = prim::ListConstruct(%14, %14)
  %138 : int[] = prim::ListConstruct(%14, %14)
  %139 : int[] = prim::ListConstruct(%14, %14)
  %input.59 : Tensor = aten::conv2d(%input.57, %135, %136, %137, %138, %139, %14) # torch/nn/modules/conv.py:415:15
  %input.61 : Tensor = aten::relu_(%input.59) # torch/nn/functional.py:1117:17
  %142 : Tensor = prim::GetAttr[name="weight"](%28)
  %143 : Tensor? = prim::GetAttr[name="bias"](%28)
  %144 : int[] = prim::ListConstruct(%14, %14)
  %145 : int[] = prim::ListConstruct(%14, %14)
  %146 : int[] = prim::ListConstruct(%14, %14)
  %input.63 : Tensor = aten::conv2d(%input.61, %142, %143, %144, %145, %146, %14) # torch/nn/modules/conv.py:415:15
  %input.65 : Tensor = aten::relu_(%input.63) # torch/nn/functional.py:1117:17
  %149 : Tensor = prim::GetAttr[name="weight"](%29)
  %150 : Tensor? = prim::GetAttr[name="bias"](%29)
  %151 : int[] = prim::ListConstruct(%14, %14)
  %152 : int[] = prim::ListConstruct(%14, %14)
  %153 : int[] = prim::ListConstruct(%14, %14)
  %input.67 : Tensor = aten::conv2d(%input.65, %149, %150, %151, %152, %153, %14) # torch/nn/modules/conv.py:415:15
  %input.69 : Tensor = aten::relu_(%input.67) # torch/nn/functional.py:1117:17
  %156 : Tensor = prim::GetAttr[name="weight"](%30)
  %157 : Tensor? = prim::GetAttr[name="bias"](%30)
  %158 : int[] = prim::ListConstruct(%14, %14)
  %159 : int[] = prim::ListConstruct(%14, %14)
  %160 : int[] = prim::ListConstruct(%14, %14)
  %input.71 : Tensor = aten::conv2d(%input.69, %156, %157, %158, %159, %160, %14) # torch/nn/modules/conv.py:415:15
  %input.73 : Tensor = aten::relu_(%input.71) # torch/nn/functional.py:1117:17
  %163 : int[] = prim::ListConstruct(%13, %13)
  %164 : int[] = prim::ListConstruct(%13, %13)
  %165 : int[] = prim::ListConstruct(%12, %12)
  %166 : int[] = prim::ListConstruct(%14, %14)
  %x.3 : Tensor = aten::max_pool2d(%input.73, %163, %164, %165, %166, %11) # torch/nn/functional.py:575:11
  %6 : __torch__.torch.nn.modules.pooling.___torch_mangle_1112.AdaptiveAvgPool2d = prim::GetAttr[name="avgpool"](%self)
  %168 : int = prim::Constant[value=2]()
  %169 : str = prim::Constant[value="Exception"]() # <string>:5:2
  %170 : int = prim::Constant[value=7]() # torch/nn/modules/pooling.py:1111:44
  %171 : int[] = prim::ListConstruct(%170, %170)
  %172 : int[] = aten::size(%x.3) # torch/nn/functional.py:925:51
  %173 : int = aten::len(%172) # <string>:5:9
  %174 : bool = aten::gt(%173, %168) # <string>:5:9
   = prim::If(%174) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%169) # <string>:5:2
      -> ()
  %x.5 : Tensor = aten::adaptive_avg_pool2d(%x.3, %171) # torch/nn/functional.py:926:11
  %x.7 : Tensor = aten::flatten(%x.5, %3, %2) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:12
  %9 : __torch__.torch.nn.modules.container.___torch_mangle_1114.Sequential = prim::GetAttr[name="classifier"](%self)
  %176 : float = prim::Constant[value=0.5]() # torch/nn/modules/dropout.py:58:32
  %177 : int = prim::Constant[value=2]() # torch/nn/functional.py:1672:22
  %178 : int = prim::Constant[value=1]()
  %179 : __torch__.torch.nn.modules.linear.___torch_mangle_1113.Linear = prim::GetAttr[name="0"](%9)
  %180 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="2"](%9)
  %181 : __torch__.torch.nn.modules.linear.___torch_mangle_4.Linear = prim::GetAttr[name="3"](%9)
  %182 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="5"](%9)
  %183 : __torch__.torch.nn.modules.linear.___torch_mangle_5.Linear = prim::GetAttr[name="6"](%9)
  %184 : Tensor = prim::GetAttr[name="weight"](%179)
  %185 : Tensor = prim::GetAttr[name="bias"](%179)
  %186 : int = aten::dim(%x.7) # torch/nn/functional.py:1672:7
  %187 : bool = aten::eq(%186, %177) # torch/nn/functional.py:1672:7
  %input.3 : Tensor = prim::If(%187) # torch/nn/functional.py:1672:4
    block0():
      %189 : Tensor = aten::t(%184) # torch/nn/functional.py:1674:39
      %ret.2 : Tensor = aten::addmm(%185, %x.7, %189, %178, %178) # torch/nn/functional.py:1674:14
      -> (%ret.2)
    block1():
      %191 : Tensor = aten::t(%184) # torch/nn/functional.py:1676:30
      %output.2 : Tensor = aten::matmul(%x.7, %191) # torch/nn/functional.py:1676:17
      %output.4 : Tensor = aten::add_(%output.2, %185, %178) # torch/nn/functional.py:1678:12
      -> (%output.4)
  %input.5 : Tensor = aten::relu_(%input.3) # torch/nn/functional.py:1117:17
  %195 : bool = prim::GetAttr[name="training"](%180)
  %input.7 : Tensor = aten::dropout(%input.5, %176, %195) # torch/nn/functional.py:973:17
  %197 : Tensor = prim::GetAttr[name="weight"](%181)
  %198 : Tensor = prim::GetAttr[name="bias"](%181)
  %199 : int = aten::dim(%input.7) # torch/nn/functional.py:1672:7
  %200 : bool = aten::eq(%199, %177) # torch/nn/functional.py:1672:7
  %input.9 : Tensor = prim::If(%200) # torch/nn/functional.py:1672:4
    block0():
      %202 : Tensor = aten::t(%197) # torch/nn/functional.py:1674:39
      %ret.3 : Tensor = aten::addmm(%198, %input.7, %202, %178, %178) # torch/nn/functional.py:1674:14
      -> (%ret.3)
    block1():
      %204 : Tensor = aten::t(%197) # torch/nn/functional.py:1676:30
      %output.5 : Tensor = aten::matmul(%input.7, %204) # torch/nn/functional.py:1676:17
      %output.6 : Tensor = aten::add_(%output.5, %198, %178) # torch/nn/functional.py:1678:12
      -> (%output.6)
  %input.11 : Tensor = aten::relu_(%input.9) # torch/nn/functional.py:1117:17
  %208 : bool = prim::GetAttr[name="training"](%182)
  %input.13 : Tensor = aten::dropout(%input.11, %176, %208) # torch/nn/functional.py:973:17
  %210 : Tensor = prim::GetAttr[name="weight"](%183)
  %211 : Tensor = prim::GetAttr[name="bias"](%183)
  %212 : int = aten::dim(%input.13) # torch/nn/functional.py:1672:7
  %213 : bool = aten::eq(%212, %177) # torch/nn/functional.py:1672:7
  %x.9 : Tensor = prim::If(%213) # torch/nn/functional.py:1672:4
    block0():
      %215 : Tensor = aten::t(%210) # torch/nn/functional.py:1674:39
      %ret.1 : Tensor = aten::addmm(%211, %input.13, %215, %178, %178) # torch/nn/functional.py:1674:14
      -> (%ret.1)
    block1():
      %217 : Tensor = aten::t(%210) # torch/nn/functional.py:1676:30
      %output.1 : Tensor = aten::matmul(%input.13, %217) # torch/nn/functional.py:1676:17
      %output.3 : Tensor = aten::add_(%output.1, %211, %178) # torch/nn/functional.py:1678:12
      -> (%output.3)
  return (%x.9)
