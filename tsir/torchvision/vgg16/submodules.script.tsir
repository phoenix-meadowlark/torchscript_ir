VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace=True)
    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace=True)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): ReLU(inplace=True)
    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): ReLU(inplace=True)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace=True)
    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)

VGG.avgpool
AdaptiveAvgPool2d.forward
  graph(%self : __torch__.torch.nn.modules.pooling.AdaptiveAvgPool2d,
        %input.1 : Tensor):
    %7 : Function = prim::Constant[name="adaptive_avg_pool2d"]()
    %3 : int = prim::Constant[value=7]() # torch/nn/modules/pooling.py:1111:44
    %6 : int[] = prim::ListConstruct(%3, %3)
    %8 : Tensor = prim::CallFunction(%7, %input.1, %6) # torch/nn/modules/pooling.py:1111:15
    return (%8)

VGG.classifier
Sequential.forward
  graph(%self : __torch__.torch.nn.modules.container.Sequential,
        %input.1 : Tensor):
    %3 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="0"](%self)
    %5 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="1"](%self)
    %7 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="2"](%self)
    %9 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="3"](%self)
    %11 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="4"](%self)
    %13 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="5"](%self)
    %15 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="6"](%self)
    %input.3 : Tensor = prim::CallMethod[name="forward"](%3, %input.1) # torch/nn/modules/container.py:117:20
    %input.5 : Tensor = prim::CallMethod[name="forward"](%5, %input.3) # torch/nn/modules/container.py:117:20
    %input.7 : Tensor = prim::CallMethod[name="forward"](%7, %input.5) # torch/nn/modules/container.py:117:20
    %input.9 : Tensor = prim::CallMethod[name="forward"](%9, %input.7) # torch/nn/modules/container.py:117:20
    %input.11 : Tensor = prim::CallMethod[name="forward"](%11, %input.9) # torch/nn/modules/container.py:117:20
    %input.13 : Tensor = prim::CallMethod[name="forward"](%13, %input.11) # torch/nn/modules/container.py:117:20
    %input.15 : Tensor = prim::CallMethod[name="forward"](%15, %input.13) # torch/nn/modules/container.py:117:20
    return (%input.15)

VGG.features
Sequential.forward
  graph(%self : __torch__.torch.nn.modules.container.Sequential,
        %input.1 : Tensor):
    %3 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="0"](%self)
    %5 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="1"](%self)
    %7 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="2"](%self)
    %9 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="3"](%self)
    %11 : __torch__.torch.nn.modules.pooling.MaxPool2d = prim::GetAttr[name="4"](%self)
    %13 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="5"](%self)
    %15 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="6"](%self)
    %17 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="7"](%self)
    %19 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="8"](%self)
    %21 : __torch__.torch.nn.modules.pooling.MaxPool2d = prim::GetAttr[name="9"](%self)
    %23 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="10"](%self)
    %25 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="11"](%self)
    %27 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="12"](%self)
    %29 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="13"](%self)
    %31 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="14"](%self)
    %33 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="15"](%self)
    %35 : __torch__.torch.nn.modules.pooling.MaxPool2d = prim::GetAttr[name="16"](%self)
    %37 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="17"](%self)
    %39 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="18"](%self)
    %41 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="19"](%self)
    %43 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="20"](%self)
    %45 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="21"](%self)
    %47 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="22"](%self)
    %49 : __torch__.torch.nn.modules.pooling.MaxPool2d = prim::GetAttr[name="23"](%self)
    %51 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="24"](%self)
    %53 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="25"](%self)
    %55 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="26"](%self)
    %57 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="27"](%self)
    %59 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="28"](%self)
    %61 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="29"](%self)
    %63 : __torch__.torch.nn.modules.pooling.MaxPool2d = prim::GetAttr[name="30"](%self)
    %input.3 : Tensor = prim::CallMethod[name="forward"](%3, %input.1) # torch/nn/modules/container.py:117:20
    %input.5 : Tensor = prim::CallMethod[name="forward"](%5, %input.3) # torch/nn/modules/container.py:117:20
    %input.7 : Tensor = prim::CallMethod[name="forward"](%7, %input.5) # torch/nn/modules/container.py:117:20
    %input.9 : Tensor = prim::CallMethod[name="forward"](%9, %input.7) # torch/nn/modules/container.py:117:20
    %input.11 : Tensor = prim::CallMethod[name="forward"](%11, %input.9) # torch/nn/modules/container.py:117:20
    %input.13 : Tensor = prim::CallMethod[name="forward"](%13, %input.11) # torch/nn/modules/container.py:117:20
    %input.15 : Tensor = prim::CallMethod[name="forward"](%15, %input.13) # torch/nn/modules/container.py:117:20
    %input.17 : Tensor = prim::CallMethod[name="forward"](%17, %input.15) # torch/nn/modules/container.py:117:20
    %input.19 : Tensor = prim::CallMethod[name="forward"](%19, %input.17) # torch/nn/modules/container.py:117:20
    %input.21 : Tensor = prim::CallMethod[name="forward"](%21, %input.19) # torch/nn/modules/container.py:117:20
    %input.23 : Tensor = prim::CallMethod[name="forward"](%23, %input.21) # torch/nn/modules/container.py:117:20
    %input.25 : Tensor = prim::CallMethod[name="forward"](%25, %input.23) # torch/nn/modules/container.py:117:20
    %input.27 : Tensor = prim::CallMethod[name="forward"](%27, %input.25) # torch/nn/modules/container.py:117:20
    %input.29 : Tensor = prim::CallMethod[name="forward"](%29, %input.27) # torch/nn/modules/container.py:117:20
    %input.31 : Tensor = prim::CallMethod[name="forward"](%31, %input.29) # torch/nn/modules/container.py:117:20
    %input.33 : Tensor = prim::CallMethod[name="forward"](%33, %input.31) # torch/nn/modules/container.py:117:20
    %input.35 : Tensor = prim::CallMethod[name="forward"](%35, %input.33) # torch/nn/modules/container.py:117:20
    %input.37 : Tensor = prim::CallMethod[name="forward"](%37, %input.35) # torch/nn/modules/container.py:117:20
    %input.39 : Tensor = prim::CallMethod[name="forward"](%39, %input.37) # torch/nn/modules/container.py:117:20
    %input.41 : Tensor = prim::CallMethod[name="forward"](%41, %input.39) # torch/nn/modules/container.py:117:20
    %input.43 : Tensor = prim::CallMethod[name="forward"](%43, %input.41) # torch/nn/modules/container.py:117:20
    %input.45 : Tensor = prim::CallMethod[name="forward"](%45, %input.43) # torch/nn/modules/container.py:117:20
    %input.47 : Tensor = prim::CallMethod[name="forward"](%47, %input.45) # torch/nn/modules/container.py:117:20
    %input.49 : Tensor = prim::CallMethod[name="forward"](%49, %input.47) # torch/nn/modules/container.py:117:20
    %input.51 : Tensor = prim::CallMethod[name="forward"](%51, %input.49) # torch/nn/modules/container.py:117:20
    %input.53 : Tensor = prim::CallMethod[name="forward"](%53, %input.51) # torch/nn/modules/container.py:117:20
    %input.55 : Tensor = prim::CallMethod[name="forward"](%55, %input.53) # torch/nn/modules/container.py:117:20
    %input.57 : Tensor = prim::CallMethod[name="forward"](%57, %input.55) # torch/nn/modules/container.py:117:20
    %input.59 : Tensor = prim::CallMethod[name="forward"](%59, %input.57) # torch/nn/modules/container.py:117:20
    %input.61 : Tensor = prim::CallMethod[name="forward"](%61, %input.59) # torch/nn/modules/container.py:117:20
    %input.63 : Tensor = prim::CallMethod[name="forward"](%63, %input.61) # torch/nn/modules/container.py:117:20
    return (%input.63)

VGG.forward
  graph(%self : __torch__.torchvision.models.vgg.VGG,
        %x.1 : Tensor):
    %10 : int = prim::Constant[value=-1]()
    %9 : int = prim::Constant[value=1]() # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:29
    %2 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="features"](%self)
    %x.3 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:43:12
    %5 : __torch__.torch.nn.modules.pooling.AdaptiveAvgPool2d = prim::GetAttr[name="avgpool"](%self)
    %x.5 : Tensor = prim::CallMethod[name="forward"](%5, %x.3) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:44:12
    %x.7 : Tensor = aten::flatten(%x.5, %9, %10) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:12
    %12 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="classifier"](%self)
    %x.9 : Tensor = prim::CallMethod[name="forward"](%12, %x.7) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:46:12
    return (%x.9)

Conv2d.forward
  graph(%self : __torch__.torch.nn.modules.conv.Conv2d,
        %input.1 : Tensor):
    %3 : Tensor = prim::GetAttr[name="weight"](%self)
    %4 : Tensor = prim::CallMethod[name="_conv_forward"](%self, %input.1, %3) # torch/nn/modules/conv.py:419:15
    return (%4)

ReLU.forward
  graph(%self : __torch__.torch.nn.modules.activation.ReLU,
        %input.1 : Tensor):
    %4 : Function = prim::Constant[name="relu"]()
    %3 : bool = prim::Constant[value=1]() # torch/nn/modules/activation.py:102:37
    %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # torch/nn/modules/activation.py:102:15
    return (%5)

MaxPool2d.forward
  graph(%self : __torch__.torch.nn.modules.pooling.MaxPool2d,
        %input.1 : Tensor):
    %13 : Function = prim::Constant[name="_max_pool2d"]()
    %7 : bool = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:57
    %6 : int = prim::Constant[value=1]() # torch/nn/modules/pooling.py:158:42
    %5 : int = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:28
    %3 : int = prim::Constant[value=2]() # torch/nn/modules/pooling.py:157:35
    %9 : int[] = prim::ListConstruct(%3, %3)
    %10 : int[] = prim::ListConstruct(%3, %3)
    %11 : int[] = prim::ListConstruct(%5, %5)
    %12 : int[] = prim::ListConstruct(%6, %6)
    %14 : Tensor = prim::CallFunction(%13, %input.1, %9, %10, %11, %12, %7, %7) # torch/nn/modules/pooling.py:157:15
    return (%14)

Linear.forward
  graph(%self : __torch__.torch.nn.modules.linear.Linear,
        %input.1 : Tensor):
    %5 : Function = prim::Constant[name="linear"]()
    %3 : Tensor = prim::GetAttr[name="weight"](%self)
    %4 : Tensor = prim::GetAttr[name="bias"](%self)
    %6 : Tensor = prim::CallFunction(%5, %input.1, %3, %4) # torch/nn/modules/linear.py:91:15
    return (%6)

Dropout.forward
  graph(%self : __torch__.torch.nn.modules.dropout.Dropout,
        %input.1 : Tensor):
    %6 : Function = prim::Constant[name="dropout"]()
    %5 : bool = prim::Constant[value=0]() # torch/nn/modules/dropout.py:58:55
    %3 : float = prim::Constant[value=0.5]() # torch/nn/modules/dropout.py:58:32
    %4 : bool = prim::GetAttr[name="training"](%self)
    %7 : Tensor = prim::CallFunction(%6, %input.1, %3, %4, %5) # torch/nn/modules/dropout.py:58:15
    return (%7)

