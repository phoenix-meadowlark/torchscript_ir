graph(%self : __torch__.torchvision.models.vgg.___torch_mangle_1118.VGG,
      %x.1 : Tensor):
  %2 : int = prim::Constant[value=-1]()
  %3 : int = prim::Constant[value=1]() # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:29
  %4 : __torch__.torch.nn.modules.container.___torch_mangle_1117.Sequential = prim::GetAttr[name="features"](%self)
  %11 : bool = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:57
  %12 : int = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:28
  %13 : int = prim::Constant[value=2]() # torch/nn/modules/pooling.py:157:35
  %14 : int = prim::Constant[value=1]() # torch/nn/modules/conv.py:413:47
  %15 : __torch__.torch.nn.modules.conv.___torch_mangle_1107.Conv2d = prim::GetAttr[name="0"](%4)
  %16 : __torch__.torch.nn.modules.conv.___torch_mangle_10.Conv2d = prim::GetAttr[name="2"](%4)
  %17 : __torch__.torch.nn.modules.conv.___torch_mangle_1109.Conv2d = prim::GetAttr[name="5"](%4)
  %18 : __torch__.torch.nn.modules.conv.___torch_mangle_26.Conv2d = prim::GetAttr[name="7"](%4)
  %19 : __torch__.torch.nn.modules.conv.___torch_mangle_467.Conv2d = prim::GetAttr[name="10"](%4)
  %20 : __torch__.torch.nn.modules.conv.___torch_mangle_3.Conv2d = prim::GetAttr[name="12"](%4)
  %21 : __torch__.torch.nn.modules.conv.___torch_mangle_1110.Conv2d = prim::GetAttr[name="15"](%4)
  %22 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="17"](%4)
  %23 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="20"](%4)
  %24 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="22"](%4)
  %25 : Tensor = prim::GetAttr[name="weight"](%15)
  %26 : Tensor? = prim::GetAttr[name="bias"](%15)
  %27 : int[] = prim::ListConstruct(%14, %14)
  %28 : int[] = prim::ListConstruct(%14, %14)
  %29 : int[] = prim::ListConstruct(%14, %14)
  %input.4 : Tensor = aten::conv2d(%x.1, %25, %26, %27, %28, %29, %14) # torch/nn/modules/conv.py:415:15
  %input.6 : Tensor = aten::relu_(%input.4) # torch/nn/functional.py:1117:17
  %32 : Tensor = prim::GetAttr[name="weight"](%16)
  %33 : Tensor? = prim::GetAttr[name="bias"](%16)
  %34 : int[] = prim::ListConstruct(%14, %14)
  %35 : int[] = prim::ListConstruct(%14, %14)
  %36 : int[] = prim::ListConstruct(%14, %14)
  %input.8 : Tensor = aten::conv2d(%input.6, %32, %33, %34, %35, %36, %14) # torch/nn/modules/conv.py:415:15
  %input.10 : Tensor = aten::relu_(%input.8) # torch/nn/functional.py:1117:17
  %39 : int[] = prim::ListConstruct(%13, %13)
  %40 : int[] = prim::ListConstruct(%13, %13)
  %41 : int[] = prim::ListConstruct(%12, %12)
  %42 : int[] = prim::ListConstruct(%14, %14)
  %input.12 : Tensor = aten::max_pool2d(%input.10, %39, %40, %41, %42, %11) # torch/nn/functional.py:575:11
  %44 : Tensor = prim::GetAttr[name="weight"](%17)
  %45 : Tensor? = prim::GetAttr[name="bias"](%17)
  %46 : int[] = prim::ListConstruct(%14, %14)
  %47 : int[] = prim::ListConstruct(%14, %14)
  %48 : int[] = prim::ListConstruct(%14, %14)
  %input.14 : Tensor = aten::conv2d(%input.12, %44, %45, %46, %47, %48, %14) # torch/nn/modules/conv.py:415:15
  %input.16 : Tensor = aten::relu_(%input.14) # torch/nn/functional.py:1117:17
  %51 : Tensor = prim::GetAttr[name="weight"](%18)
  %52 : Tensor? = prim::GetAttr[name="bias"](%18)
  %53 : int[] = prim::ListConstruct(%14, %14)
  %54 : int[] = prim::ListConstruct(%14, %14)
  %55 : int[] = prim::ListConstruct(%14, %14)
  %input.17 : Tensor = aten::conv2d(%input.16, %51, %52, %53, %54, %55, %14) # torch/nn/modules/conv.py:415:15
  %input.19 : Tensor = aten::relu_(%input.17) # torch/nn/functional.py:1117:17
  %58 : int[] = prim::ListConstruct(%13, %13)
  %59 : int[] = prim::ListConstruct(%13, %13)
  %60 : int[] = prim::ListConstruct(%12, %12)
  %61 : int[] = prim::ListConstruct(%14, %14)
  %input.21 : Tensor = aten::max_pool2d(%input.19, %58, %59, %60, %61, %11) # torch/nn/functional.py:575:11
  %63 : Tensor = prim::GetAttr[name="weight"](%19)
  %64 : Tensor? = prim::GetAttr[name="bias"](%19)
  %65 : int[] = prim::ListConstruct(%14, %14)
  %66 : int[] = prim::ListConstruct(%14, %14)
  %67 : int[] = prim::ListConstruct(%14, %14)
  %input.23 : Tensor = aten::conv2d(%input.21, %63, %64, %65, %66, %67, %14) # torch/nn/modules/conv.py:415:15
  %input.25 : Tensor = aten::relu_(%input.23) # torch/nn/functional.py:1117:17
  %70 : Tensor = prim::GetAttr[name="weight"](%20)
  %71 : Tensor? = prim::GetAttr[name="bias"](%20)
  %72 : int[] = prim::ListConstruct(%14, %14)
  %73 : int[] = prim::ListConstruct(%14, %14)
  %74 : int[] = prim::ListConstruct(%14, %14)
  %input.27 : Tensor = aten::conv2d(%input.25, %70, %71, %72, %73, %74, %14) # torch/nn/modules/conv.py:415:15
  %input.29 : Tensor = aten::relu_(%input.27) # torch/nn/functional.py:1117:17
  %77 : int[] = prim::ListConstruct(%13, %13)
  %78 : int[] = prim::ListConstruct(%13, %13)
  %79 : int[] = prim::ListConstruct(%12, %12)
  %80 : int[] = prim::ListConstruct(%14, %14)
  %input.31 : Tensor = aten::max_pool2d(%input.29, %77, %78, %79, %80, %11) # torch/nn/functional.py:575:11
  %82 : Tensor = prim::GetAttr[name="weight"](%21)
  %83 : Tensor? = prim::GetAttr[name="bias"](%21)
  %84 : int[] = prim::ListConstruct(%14, %14)
  %85 : int[] = prim::ListConstruct(%14, %14)
  %86 : int[] = prim::ListConstruct(%14, %14)
  %input.33 : Tensor = aten::conv2d(%input.31, %82, %83, %84, %85, %86, %14) # torch/nn/modules/conv.py:415:15
  %input.35 : Tensor = aten::relu_(%input.33) # torch/nn/functional.py:1117:17
  %89 : Tensor = prim::GetAttr[name="weight"](%22)
  %90 : Tensor? = prim::GetAttr[name="bias"](%22)
  %91 : int[] = prim::ListConstruct(%14, %14)
  %92 : int[] = prim::ListConstruct(%14, %14)
  %93 : int[] = prim::ListConstruct(%14, %14)
  %input.37 : Tensor = aten::conv2d(%input.35, %89, %90, %91, %92, %93, %14) # torch/nn/modules/conv.py:415:15
  %input.39 : Tensor = aten::relu_(%input.37) # torch/nn/functional.py:1117:17
  %96 : int[] = prim::ListConstruct(%13, %13)
  %97 : int[] = prim::ListConstruct(%13, %13)
  %98 : int[] = prim::ListConstruct(%12, %12)
  %99 : int[] = prim::ListConstruct(%14, %14)
  %input.41 : Tensor = aten::max_pool2d(%input.39, %96, %97, %98, %99, %11) # torch/nn/functional.py:575:11
  %101 : Tensor = prim::GetAttr[name="weight"](%23)
  %102 : Tensor? = prim::GetAttr[name="bias"](%23)
  %103 : int[] = prim::ListConstruct(%14, %14)
  %104 : int[] = prim::ListConstruct(%14, %14)
  %105 : int[] = prim::ListConstruct(%14, %14)
  %input.43 : Tensor = aten::conv2d(%input.41, %101, %102, %103, %104, %105, %14) # torch/nn/modules/conv.py:415:15
  %input.45 : Tensor = aten::relu_(%input.43) # torch/nn/functional.py:1117:17
  %108 : Tensor = prim::GetAttr[name="weight"](%24)
  %109 : Tensor? = prim::GetAttr[name="bias"](%24)
  %110 : int[] = prim::ListConstruct(%14, %14)
  %111 : int[] = prim::ListConstruct(%14, %14)
  %112 : int[] = prim::ListConstruct(%14, %14)
  %input.47 : Tensor = aten::conv2d(%input.45, %108, %109, %110, %111, %112, %14) # torch/nn/modules/conv.py:415:15
  %input.49 : Tensor = aten::relu_(%input.47) # torch/nn/functional.py:1117:17
  %115 : int[] = prim::ListConstruct(%13, %13)
  %116 : int[] = prim::ListConstruct(%13, %13)
  %117 : int[] = prim::ListConstruct(%12, %12)
  %118 : int[] = prim::ListConstruct(%14, %14)
  %x.3 : Tensor = aten::max_pool2d(%input.49, %115, %116, %117, %118, %11) # torch/nn/functional.py:575:11
  %6 : __torch__.torch.nn.modules.pooling.___torch_mangle_1112.AdaptiveAvgPool2d = prim::GetAttr[name="avgpool"](%self)
  %120 : int = prim::Constant[value=2]()
  %121 : str = prim::Constant[value="Exception"]() # <string>:5:2
  %122 : int = prim::Constant[value=7]() # torch/nn/modules/pooling.py:1111:44
  %123 : int[] = prim::ListConstruct(%122, %122)
  %124 : int[] = aten::size(%x.3) # torch/nn/functional.py:925:51
  %125 : int = aten::len(%124) # <string>:5:9
  %126 : bool = aten::gt(%125, %120) # <string>:5:9
   = prim::If(%126) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%121) # <string>:5:2
      -> ()
  %x.5 : Tensor = aten::adaptive_avg_pool2d(%x.3, %123) # torch/nn/functional.py:926:11
  %x.7 : Tensor = aten::flatten(%x.5, %3, %2) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:12
  %9 : __torch__.torch.nn.modules.container.___torch_mangle_1114.Sequential = prim::GetAttr[name="classifier"](%self)
  %128 : float = prim::Constant[value=0.5]() # torch/nn/modules/dropout.py:58:32
  %129 : int = prim::Constant[value=2]() # torch/nn/functional.py:1672:22
  %130 : int = prim::Constant[value=1]()
  %131 : __torch__.torch.nn.modules.linear.___torch_mangle_1113.Linear = prim::GetAttr[name="0"](%9)
  %132 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="2"](%9)
  %133 : __torch__.torch.nn.modules.linear.___torch_mangle_4.Linear = prim::GetAttr[name="3"](%9)
  %134 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="5"](%9)
  %135 : __torch__.torch.nn.modules.linear.___torch_mangle_5.Linear = prim::GetAttr[name="6"](%9)
  %136 : Tensor = prim::GetAttr[name="weight"](%131)
  %137 : Tensor = prim::GetAttr[name="bias"](%131)
  %138 : int = aten::dim(%x.7) # torch/nn/functional.py:1672:7
  %139 : bool = aten::eq(%138, %129) # torch/nn/functional.py:1672:7
  %input.3 : Tensor = prim::If(%139) # torch/nn/functional.py:1672:4
    block0():
      %141 : Tensor = aten::t(%136) # torch/nn/functional.py:1674:39
      %ret.2 : Tensor = aten::addmm(%137, %x.7, %141, %130, %130) # torch/nn/functional.py:1674:14
      -> (%ret.2)
    block1():
      %143 : Tensor = aten::t(%136) # torch/nn/functional.py:1676:30
      %output.2 : Tensor = aten::matmul(%x.7, %143) # torch/nn/functional.py:1676:17
      %output.4 : Tensor = aten::add_(%output.2, %137, %130) # torch/nn/functional.py:1678:12
      -> (%output.4)
  %input.5 : Tensor = aten::relu_(%input.3) # torch/nn/functional.py:1117:17
  %147 : bool = prim::GetAttr[name="training"](%132)
  %input.7 : Tensor = aten::dropout(%input.5, %128, %147) # torch/nn/functional.py:973:17
  %149 : Tensor = prim::GetAttr[name="weight"](%133)
  %150 : Tensor = prim::GetAttr[name="bias"](%133)
  %151 : int = aten::dim(%input.7) # torch/nn/functional.py:1672:7
  %152 : bool = aten::eq(%151, %129) # torch/nn/functional.py:1672:7
  %input.9 : Tensor = prim::If(%152) # torch/nn/functional.py:1672:4
    block0():
      %154 : Tensor = aten::t(%149) # torch/nn/functional.py:1674:39
      %ret.3 : Tensor = aten::addmm(%150, %input.7, %154, %130, %130) # torch/nn/functional.py:1674:14
      -> (%ret.3)
    block1():
      %156 : Tensor = aten::t(%149) # torch/nn/functional.py:1676:30
      %output.5 : Tensor = aten::matmul(%input.7, %156) # torch/nn/functional.py:1676:17
      %output.6 : Tensor = aten::add_(%output.5, %150, %130) # torch/nn/functional.py:1678:12
      -> (%output.6)
  %input.11 : Tensor = aten::relu_(%input.9) # torch/nn/functional.py:1117:17
  %160 : bool = prim::GetAttr[name="training"](%134)
  %input.13 : Tensor = aten::dropout(%input.11, %128, %160) # torch/nn/functional.py:973:17
  %162 : Tensor = prim::GetAttr[name="weight"](%135)
  %163 : Tensor = prim::GetAttr[name="bias"](%135)
  %164 : int = aten::dim(%input.13) # torch/nn/functional.py:1672:7
  %165 : bool = aten::eq(%164, %129) # torch/nn/functional.py:1672:7
  %x.9 : Tensor = prim::If(%165) # torch/nn/functional.py:1672:4
    block0():
      %167 : Tensor = aten::t(%162) # torch/nn/functional.py:1674:39
      %ret.1 : Tensor = aten::addmm(%163, %input.13, %167, %130, %130) # torch/nn/functional.py:1674:14
      -> (%ret.1)
    block1():
      %169 : Tensor = aten::t(%162) # torch/nn/functional.py:1676:30
      %output.1 : Tensor = aten::matmul(%input.13, %169) # torch/nn/functional.py:1676:17
      %output.3 : Tensor = aten::add_(%output.1, %163, %130) # torch/nn/functional.py:1678:12
      -> (%output.3)
  return (%x.9)
