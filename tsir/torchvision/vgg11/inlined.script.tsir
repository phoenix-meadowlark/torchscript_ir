graph(%self : __torch__.torchvision.models.vgg.VGG,
      %x.1 : Tensor):
  %2 : int = prim::Constant[value=-1]()
  %3 : int = prim::Constant[value=1]() # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:29
  %4 : __torch__.torch.nn.modules.container.___torch_mangle_1111.Sequential = prim::GetAttr[name="features"](%self)
  %11 : bool = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:57
  %12 : int = prim::Constant[value=0]() # torch/nn/modules/pooling.py:158:28
  %13 : int = prim::Constant[value=2]() # torch/nn/modules/pooling.py:157:35
  %14 : int = prim::Constant[value=1]() # torch/nn/modules/conv.py:413:47
  %15 : __torch__.torch.nn.modules.conv.___torch_mangle_1107.Conv2d = prim::GetAttr[name="0"](%4)
  %16 : __torch__.torch.nn.modules.conv.___torch_mangle_1109.Conv2d = prim::GetAttr[name="3"](%4)
  %17 : __torch__.torch.nn.modules.conv.___torch_mangle_467.Conv2d = prim::GetAttr[name="6"](%4)
  %18 : __torch__.torch.nn.modules.conv.___torch_mangle_3.Conv2d = prim::GetAttr[name="8"](%4)
  %19 : __torch__.torch.nn.modules.conv.___torch_mangle_1110.Conv2d = prim::GetAttr[name="11"](%4)
  %20 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="13"](%4)
  %21 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="16"](%4)
  %22 : __torch__.torch.nn.modules.conv.___torch_mangle_948.Conv2d = prim::GetAttr[name="18"](%4)
  %23 : Tensor = prim::GetAttr[name="weight"](%15)
  %24 : Tensor? = prim::GetAttr[name="bias"](%15)
  %25 : int[] = prim::ListConstruct(%14, %14)
  %26 : int[] = prim::ListConstruct(%14, %14)
  %27 : int[] = prim::ListConstruct(%14, %14)
  %input.4 : Tensor = aten::conv2d(%x.1, %23, %24, %25, %26, %27, %14) # torch/nn/modules/conv.py:415:15
  %input.6 : Tensor = aten::relu_(%input.4) # torch/nn/functional.py:1117:17
  %30 : int[] = prim::ListConstruct(%13, %13)
  %31 : int[] = prim::ListConstruct(%13, %13)
  %32 : int[] = prim::ListConstruct(%12, %12)
  %33 : int[] = prim::ListConstruct(%14, %14)
  %input.8 : Tensor = aten::max_pool2d(%input.6, %30, %31, %32, %33, %11) # torch/nn/functional.py:575:11
  %35 : Tensor = prim::GetAttr[name="weight"](%16)
  %36 : Tensor? = prim::GetAttr[name="bias"](%16)
  %37 : int[] = prim::ListConstruct(%14, %14)
  %38 : int[] = prim::ListConstruct(%14, %14)
  %39 : int[] = prim::ListConstruct(%14, %14)
  %input.10 : Tensor = aten::conv2d(%input.8, %35, %36, %37, %38, %39, %14) # torch/nn/modules/conv.py:415:15
  %input.12 : Tensor = aten::relu_(%input.10) # torch/nn/functional.py:1117:17
  %42 : int[] = prim::ListConstruct(%13, %13)
  %43 : int[] = prim::ListConstruct(%13, %13)
  %44 : int[] = prim::ListConstruct(%12, %12)
  %45 : int[] = prim::ListConstruct(%14, %14)
  %input.14 : Tensor = aten::max_pool2d(%input.12, %42, %43, %44, %45, %11) # torch/nn/functional.py:575:11
  %47 : Tensor = prim::GetAttr[name="weight"](%17)
  %48 : Tensor? = prim::GetAttr[name="bias"](%17)
  %49 : int[] = prim::ListConstruct(%14, %14)
  %50 : int[] = prim::ListConstruct(%14, %14)
  %51 : int[] = prim::ListConstruct(%14, %14)
  %input.16 : Tensor = aten::conv2d(%input.14, %47, %48, %49, %50, %51, %14) # torch/nn/modules/conv.py:415:15
  %input.17 : Tensor = aten::relu_(%input.16) # torch/nn/functional.py:1117:17
  %54 : Tensor = prim::GetAttr[name="weight"](%18)
  %55 : Tensor? = prim::GetAttr[name="bias"](%18)
  %56 : int[] = prim::ListConstruct(%14, %14)
  %57 : int[] = prim::ListConstruct(%14, %14)
  %58 : int[] = prim::ListConstruct(%14, %14)
  %input.19 : Tensor = aten::conv2d(%input.17, %54, %55, %56, %57, %58, %14) # torch/nn/modules/conv.py:415:15
  %input.21 : Tensor = aten::relu_(%input.19) # torch/nn/functional.py:1117:17
  %61 : int[] = prim::ListConstruct(%13, %13)
  %62 : int[] = prim::ListConstruct(%13, %13)
  %63 : int[] = prim::ListConstruct(%12, %12)
  %64 : int[] = prim::ListConstruct(%14, %14)
  %input.23 : Tensor = aten::max_pool2d(%input.21, %61, %62, %63, %64, %11) # torch/nn/functional.py:575:11
  %66 : Tensor = prim::GetAttr[name="weight"](%19)
  %67 : Tensor? = prim::GetAttr[name="bias"](%19)
  %68 : int[] = prim::ListConstruct(%14, %14)
  %69 : int[] = prim::ListConstruct(%14, %14)
  %70 : int[] = prim::ListConstruct(%14, %14)
  %input.25 : Tensor = aten::conv2d(%input.23, %66, %67, %68, %69, %70, %14) # torch/nn/modules/conv.py:415:15
  %input.27 : Tensor = aten::relu_(%input.25) # torch/nn/functional.py:1117:17
  %73 : Tensor = prim::GetAttr[name="weight"](%20)
  %74 : Tensor? = prim::GetAttr[name="bias"](%20)
  %75 : int[] = prim::ListConstruct(%14, %14)
  %76 : int[] = prim::ListConstruct(%14, %14)
  %77 : int[] = prim::ListConstruct(%14, %14)
  %input.29 : Tensor = aten::conv2d(%input.27, %73, %74, %75, %76, %77, %14) # torch/nn/modules/conv.py:415:15
  %input.31 : Tensor = aten::relu_(%input.29) # torch/nn/functional.py:1117:17
  %80 : int[] = prim::ListConstruct(%13, %13)
  %81 : int[] = prim::ListConstruct(%13, %13)
  %82 : int[] = prim::ListConstruct(%12, %12)
  %83 : int[] = prim::ListConstruct(%14, %14)
  %input.33 : Tensor = aten::max_pool2d(%input.31, %80, %81, %82, %83, %11) # torch/nn/functional.py:575:11
  %85 : Tensor = prim::GetAttr[name="weight"](%21)
  %86 : Tensor? = prim::GetAttr[name="bias"](%21)
  %87 : int[] = prim::ListConstruct(%14, %14)
  %88 : int[] = prim::ListConstruct(%14, %14)
  %89 : int[] = prim::ListConstruct(%14, %14)
  %input.35 : Tensor = aten::conv2d(%input.33, %85, %86, %87, %88, %89, %14) # torch/nn/modules/conv.py:415:15
  %input.37 : Tensor = aten::relu_(%input.35) # torch/nn/functional.py:1117:17
  %92 : Tensor = prim::GetAttr[name="weight"](%22)
  %93 : Tensor? = prim::GetAttr[name="bias"](%22)
  %94 : int[] = prim::ListConstruct(%14, %14)
  %95 : int[] = prim::ListConstruct(%14, %14)
  %96 : int[] = prim::ListConstruct(%14, %14)
  %input.39 : Tensor = aten::conv2d(%input.37, %92, %93, %94, %95, %96, %14) # torch/nn/modules/conv.py:415:15
  %input.41 : Tensor = aten::relu_(%input.39) # torch/nn/functional.py:1117:17
  %99 : int[] = prim::ListConstruct(%13, %13)
  %100 : int[] = prim::ListConstruct(%13, %13)
  %101 : int[] = prim::ListConstruct(%12, %12)
  %102 : int[] = prim::ListConstruct(%14, %14)
  %x.3 : Tensor = aten::max_pool2d(%input.41, %99, %100, %101, %102, %11) # torch/nn/functional.py:575:11
  %6 : __torch__.torch.nn.modules.pooling.___torch_mangle_1112.AdaptiveAvgPool2d = prim::GetAttr[name="avgpool"](%self)
  %104 : int = prim::Constant[value=2]()
  %105 : str = prim::Constant[value="Exception"]() # <string>:5:2
  %106 : int = prim::Constant[value=7]() # torch/nn/modules/pooling.py:1111:44
  %107 : int[] = prim::ListConstruct(%106, %106)
  %108 : int[] = aten::size(%x.3) # torch/nn/functional.py:925:51
  %109 : int = aten::len(%108) # <string>:5:9
  %110 : bool = aten::gt(%109, %104) # <string>:5:9
   = prim::If(%110) # <string>:5:2
    block0():
      -> ()
    block1():
       = prim::RaiseException(%105) # <string>:5:2
      -> ()
  %x.5 : Tensor = aten::adaptive_avg_pool2d(%x.3, %107) # torch/nn/functional.py:926:11
  %x.7 : Tensor = aten::flatten(%x.5, %3, %2) # torch/hub/pytorch_vision_master/torchvision/models/vgg.py:45:12
  %9 : __torch__.torch.nn.modules.container.___torch_mangle_1114.Sequential = prim::GetAttr[name="classifier"](%self)
  %112 : float = prim::Constant[value=0.5]() # torch/nn/modules/dropout.py:58:32
  %113 : int = prim::Constant[value=2]() # torch/nn/functional.py:1672:22
  %114 : int = prim::Constant[value=1]()
  %115 : __torch__.torch.nn.modules.linear.___torch_mangle_1113.Linear = prim::GetAttr[name="0"](%9)
  %116 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="2"](%9)
  %117 : __torch__.torch.nn.modules.linear.___torch_mangle_4.Linear = prim::GetAttr[name="3"](%9)
  %118 : __torch__.torch.nn.modules.dropout.Dropout = prim::GetAttr[name="5"](%9)
  %119 : __torch__.torch.nn.modules.linear.___torch_mangle_5.Linear = prim::GetAttr[name="6"](%9)
  %120 : Tensor = prim::GetAttr[name="weight"](%115)
  %121 : Tensor = prim::GetAttr[name="bias"](%115)
  %122 : int = aten::dim(%x.7) # torch/nn/functional.py:1672:7
  %123 : bool = aten::eq(%122, %113) # torch/nn/functional.py:1672:7
  %input.3 : Tensor = prim::If(%123) # torch/nn/functional.py:1672:4
    block0():
      %125 : Tensor = aten::t(%120) # torch/nn/functional.py:1674:39
      %ret.2 : Tensor = aten::addmm(%121, %x.7, %125, %114, %114) # torch/nn/functional.py:1674:14
      -> (%ret.2)
    block1():
      %127 : Tensor = aten::t(%120) # torch/nn/functional.py:1676:30
      %output.2 : Tensor = aten::matmul(%x.7, %127) # torch/nn/functional.py:1676:17
      %output.4 : Tensor = aten::add_(%output.2, %121, %114) # torch/nn/functional.py:1678:12
      -> (%output.4)
  %input.5 : Tensor = aten::relu_(%input.3) # torch/nn/functional.py:1117:17
  %131 : bool = prim::GetAttr[name="training"](%116)
  %input.7 : Tensor = aten::dropout(%input.5, %112, %131) # torch/nn/functional.py:973:17
  %133 : Tensor = prim::GetAttr[name="weight"](%117)
  %134 : Tensor = prim::GetAttr[name="bias"](%117)
  %135 : int = aten::dim(%input.7) # torch/nn/functional.py:1672:7
  %136 : bool = aten::eq(%135, %113) # torch/nn/functional.py:1672:7
  %input.9 : Tensor = prim::If(%136) # torch/nn/functional.py:1672:4
    block0():
      %138 : Tensor = aten::t(%133) # torch/nn/functional.py:1674:39
      %ret.3 : Tensor = aten::addmm(%134, %input.7, %138, %114, %114) # torch/nn/functional.py:1674:14
      -> (%ret.3)
    block1():
      %140 : Tensor = aten::t(%133) # torch/nn/functional.py:1676:30
      %output.5 : Tensor = aten::matmul(%input.7, %140) # torch/nn/functional.py:1676:17
      %output.6 : Tensor = aten::add_(%output.5, %134, %114) # torch/nn/functional.py:1678:12
      -> (%output.6)
  %input.11 : Tensor = aten::relu_(%input.9) # torch/nn/functional.py:1117:17
  %144 : bool = prim::GetAttr[name="training"](%118)
  %input.13 : Tensor = aten::dropout(%input.11, %112, %144) # torch/nn/functional.py:973:17
  %146 : Tensor = prim::GetAttr[name="weight"](%119)
  %147 : Tensor = prim::GetAttr[name="bias"](%119)
  %148 : int = aten::dim(%input.13) # torch/nn/functional.py:1672:7
  %149 : bool = aten::eq(%148, %113) # torch/nn/functional.py:1672:7
  %x.9 : Tensor = prim::If(%149) # torch/nn/functional.py:1672:4
    block0():
      %151 : Tensor = aten::t(%146) # torch/nn/functional.py:1674:39
      %ret.1 : Tensor = aten::addmm(%147, %input.13, %151, %114, %114) # torch/nn/functional.py:1674:14
      -> (%ret.1)
    block1():
      %153 : Tensor = aten::t(%146) # torch/nn/functional.py:1676:30
      %output.1 : Tensor = aten::matmul(%input.13, %153) # torch/nn/functional.py:1676:17
      %output.3 : Tensor = aten::add_(%output.1, %147, %114) # torch/nn/functional.py:1678:12
      -> (%output.3)
  return (%x.9)
